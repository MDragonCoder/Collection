# -*- coding: utf-8 -*-
"""Assignment3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EzidiVqE6xBWjQ183QhZtNk5Knqd9cXM
"""

def balanced(A):
  total = 0;
  total2 = 0;
  for x in A[:(len(A)//2)]:
    total += x
  for c in A[len(A)//2:]:
   total2 += c
  if total == total2:
    return True
  else:
    return False

A =[3, 5, 2, 5, 4, 1]
B = [3, 5, 2, 3, 5, 5, 1, 2]
C =[3, 6, 2, 5, 4, 1]

print(balanced(A))
print(balanced(B))
print(balanced(C))

def trim(A):
  A = A[1:len(A)-1]
  return A

print(trim(A))
print(trim(B))
print(trim(C))

def every_other(A):
  A = A[::2]
  return A

print(every_other(B))
D =[2, 3, 4, 5, 6, 7]
print(every_other(D))
E =[2, 3, 4, 5, 6, 7, 8]
print(every_other(E))

def palindrome(A):
  for x,y in zip(A,A[(len(A))::-1]):
    if x != y:
      return False
    return True

F = [2, 2, 5, 1, 5, 2, 2]
G = [2, 2, 5, 1, 1, 5, 2, 2]
H =[2, 2, 5, 1, 5, 2, 1]
print(palindrome(F))
print(palindrome(G))
print(palindrome(H))

def sort(A):
    if A[0] < A[1]:
        if A[1] < A[2]:
            return [A[0], A[1], A[2]]
        elif A[0] < A[2]:
            return [A[0], A[2], A[1]]
        else:
            return [A[2], A[0], A[1]]
    else:
        if A[0] < A[2]:
            return [A[1], A[0], A[2]]
        elif A[1] < A[2]:
            return [A[1], A[2], A[0]]
        else:
            return [A[2], A[1], A[0]]

S = [2, 3, 1]
T = [2, 1, 2]
print(sort(S))
print(sort(T))

def first_integers(n):
  for i in range(1,n):
    print(i)

print(first_integers(7))
print(first_integers(6))

def first_odd(n):
  for i in range(0,n):
     if i%2 != 0:
      print(i)

print(first_odd(6))

def evenly_spaced(n,s,t):
  result = []
  current_value = s
  step = (t - s) / (n - 1)
  for i in range(n):
    result.append(current_value)
    current_value += step
  return result

print(evenly_spaced(6, 20, 21))
print(evenly_spaced(5,3,6))
print(evenly_spaced(9, 3, 6))